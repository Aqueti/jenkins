#!/usr/bin/env groovy

pipeline {
   agent {label 'compiler'}
   stages {
      //Get repo information
      stage('TestPrep') {
         steps {
            sh "echo stashing release_notes.txt"
            stash includes: "release_notes.txt", name: 'release_notes'
            sh "echo stashing test scripts"
            dir('jenkins/test_scripts') {
               stash includes: '*',  name: 'test_scripts'
            }
            dir('jenkins/web_scripts') {
               stash includes: '*', name: 'web_scripts'
            }
         }
      }

      //Build the render component
      stage('render build') {
         steps {
            sh 'echo Building render system packages on `hostname`'
//          
            sh "mkdir -p jenkins/build/acos"
            dir('jenkins/build/acos') {
               //Build acos and tests
               sh "cmake ../../.. -DBUILD_API:BOOL=ON -DBUILD_AGT:BOOL=ON -DBUILD_APPLICATIONS:BOOL=ON -DBUILD_TESTS:BOOL=ON -DBUILD_DEB_PACKAGE:BOOL=OFF -DUSE_DOXYGEN:BOOL=ON -DBUILD_AUTOFOCUS:BOOL=ON -DBUILD_OPENCV:BOOL=ON -DBUILD_EXAMPLES:BOOL=ON -DVERSION_TAG=${env.BRANCH_NAME} -DUSE_HTTPS:BOOL=OFF"
               sh "make -j"

               //Run tests
               sh "echo Testing acos"
               sh "./INSTALL/bin/testATL"

               dir('INSTALL') {
                  sh "echo Looking for documentation at `pwd`"
                  sh "tar -cvf Documentation.tar Documentation"
                  stash includes:'Documentation.tar', name: 'documentation'
               }

               //Build packages
               sh "cmake ../../.. -DBUILD_API:BOOL=ON -DBUILD_AGT:BOOL=ON -DBUILD_APPLICATIONS:BOOL=ON -DBUILD_TESTS:BOOL=OFF -DBUILD_DEB_PACKAGE:BOOL=ON -DDOXYGEN_DIR:STRING=~/Documentation -DBUILD_AUTOFOCUS:BOOL=ON -DBUILD_OPENCV:BOOL=ON -DBUILD_EXAMPLES:BOOL=ON -DVERSION_TAG=${env.BRANCH_NAME} -DUSE_HTTPS:BOOL=OFF"
               sh "make -j"
             
               dir('INSTALL/deb') {
                  stash includes: '*.deb', excludes: '*@*', name: 'acos'
                  sh "rm *.deb"
               }  

               dir('applications-prefix/src/applications-build/') {
                  sh "make package"
                  stash includes: '*.deb', excludes: '*@*', name: 'apps'
                  sh "rm *.deb"
               }
               dir('agt-prefix/src/agt-build/') {
                  sh "make package"
                  stash includes: '*.deb', excludes: '*@*', name: 'agt'
                  sh "rm *.deb"
               }
            }
         }
      }

      stage('tegra build') {
         agent { label 'tegra_compiler_1' }
         steps {
            sh 'echo Building tegra files on `hostname`'
// 
            sh 'mkdir -p jenkins/build/acos'
            dir('jenkins/build/acos') {
               //Build including tests
               sh "cmake ../../.. -DBUILD_API:BOOL=OFF -DBUILD_ACI:BOOL=ON -DBUILD_AGT:BOOL=OFF -DBUILD_APPLICATIONS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DEB_PACKAGE:BOOL=OFF -DDOXYGEN_DIR:STRING=~/Documentation -DBUILD_AUTOFOCUS:BOOL=OFF -DBUILD_OPENCV:BOOL=OFF -DVERSION_TAG=${env.BRANCH_NAME} -DUSE_HTTPS:BOOL=OFF"
               sh "make -j5"

               //Run tests
               sh "echo Run aci when ready"

               //Build packages
               sh "cmake ../../.. -DBUILD_API:BOOL=OFF -DBUILD_ACI:BOOL=ON -DBUILD_AGT:BOOL=OFF -DBUILD_APPLICATIONS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -DBUILD_DEB_PACKAGE:BOOL=ON -DDOXYGEN_DIR:STRING=~/Documentation -DBUILD_AUTOFOCUS:BOOL=OFF -DBUILD_OPENCV:BOOL=OFF -DVERSION_TAG=${env.BRANCH_NAME} -DUSE_HTTPS:BOOL=OFF"
               sh "make -j5"
                        
               dir('aci-prefix/src/aci-build') {
                  stash includes: '*.deb', excludes:'*@*', name: 'aci'
                  sh "rm *.deb"
               }
            }
         }
      }

      stage('Test') {
         agent { label 'master' }
         steps {
            sh "echo test here"
            sh "mkdir -p jenkins/test/${env.BUILD_NUMBER}"
            dir('jenkins/test') {
               unstash "test_scripts"
               unstash 'acos'
               unstash 'agt'
               unstash 'apps'
               unstash 'aci'

//               sh './componentTest.sh'
            }

            sh "echo removing test directory"
            sh "rm -rf jenkins/test/${env.BUILD_NUMBER}"
         }
      }

      stage('Deploy') {
         agent { label 'master' }
         steps {
            sh "echo deploying..."
            sh "mkdir -p web_scripts"
            dir("web_scripts") {
               unstash 'web_scripts'
            }

            //Create deployment package and index.html to reference
            sh "mkdir -p deploy/${env.BRANCH_NAME}/${env.BUILD_NUMBER}"
            dir("deploy/${env.BRANCH_NAME}/${env.BUILD_NUMBER}") {
               unstash 'acos'
               unstash 'agt'
               unstash 'apps'
               unstash 'aci'
               unstash 'release_notes'


               sh "echo \"running: ../../../web_scripts/genReleasePage.sh ${BRANCH_NAME} ${BUILD_NUMBER}\""
               sh "../../../web_scripts/genReleasePage.sh ${BRANCH_NAME} ${BUILD_NUMBER}"
            }

            //Build webpage
            dir("deploy") {
               unstash 'documentation'
               sh "tar -xvf Documentation.tar"

               sh "echo \"building webpage for all\""
               sh "../web_scripts/genMainPage.sh ${env.BRANCH_NAME}"
            }

            sh "rm -r deploy"
            sh "rm -r web_scripts"
         }
      }
   }

   post {  
      always {  
         deleteDir()
      }
    
      success {
         sh "echo Sending success e-mail"
         emailext(
            recipientProviders: [[$class: 'DevelopersRecipientProvider']],
            to: "astepenko@aqueti.com", 
            subject: "Build ${BUILD_NUMBER} for the ${BRANCH_NAME} branch passed.",
            body: "Successfully built acos branch ${BRANCH_NAME} build number ${BUILD_NUMBER}. Packages should be available at http://10.0.0.10/repositories/${BRANCH_NAME}/${BUILD_NUMBER}/index.html"
         )
      }

      failure {
         sh " echo Sending failure e-mail"
         emailext (
            recipientProviders: [[$class: 'CulpritsRecipientProvider']],
            to: "astepenko@aqueti.com",
            subject: 'FAILURE: build ${BUILD_NUMBER} of  ACOS branch ${BRANCH_NAME}',
            body: 'Failed to build acos branch ${BRANCH_NAME} build number ${BUILD_NUMBER}.'
         )
     }
  }
}
